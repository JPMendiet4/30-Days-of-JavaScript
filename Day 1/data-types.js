// Tipos de datos en JavaScript

// Numbers (N√∫meros): Enteros o decimales todos son tratados de la misma manera
// Notacion calsica, .como separador de decimales
let edad = 25;
let precio = 12.5;
const c = 300000;

// Notacion cientifica
const numeroGrande = 1e6; // 1 mill√≥n
const numeroPeque√±o = 1e-6; // 0.000001

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Strings (Cadenas de texto): Son secuencias de caracteres que se utilizan para representar texto y pueden ser creadas usando ' y/o "".
const nombre = "Platzi";
const apellido = 'Academy';

// Concatenaci√≥n de strings
const nombreCompleto = nombre + " " + apellido;

// Notaci√≥n template literal para crear strings que incluyen variables y expresiones
const nombreCompleto2 = `${nombre} ${apellido}`;

/* 
Metodos para manejar strings:

  -  length: Devuelve la longitud de un string.
  -  toUpperCase(): Devuelve el string en may√∫sculas.
  -  toLowerCase(): Devuelve el string en min√∫sculas.
  -  substring(): Devuelve una parte del string.
*/

const nombre = "Platzi";

console.log(nombre.length) // 6
console.log(nombre.toUpperCase()) // PLATZI
console.log(nombre.toLowerCase()) // platzi
console.log(nombre.substring(0, 5)) // Platz

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Objetcs (Objetos): Son estructuras de datos que permiten almacenar m√∫ltiples valores y m√©todos. Se definen utilizando llaves {} (JSON).
const persona = {
    nombre: "Fulanita",
    platziRank: 9567,
      cursoFavorito: {
          nombre: "B√°sico de JavaScript",
          clases: 30,
          duraci√≥n: "2 horas"
      }
  };

 // Acceder a las propiedades de un objeto se puede hacer mediante notaci√≥n de . o [].
 console.log(persona.nombre); // "Fulanita"
 console.log(persona.cursoFavorito.nombre); // "B√°sico de JavaScript"
 console.log(persona["platziRank"]); // 9567


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Boolean (Booleanos): Son un tipo de dato que puede tener uno de dos valores: true o false.
let cursoCompletado = true;
let lecturaCompletada = false;

// Saber el tipo de dato de una variable
typeof "#PlatziChallenge" // "string"
typeof 30 // number
typeof true // boolean
typeof {} // "object"

// üëÄ con los arrays nos devuelve que son un objeto
// M√°s adelante descubriremos la raz√≥n
typeof [] // "object"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* 
Boolean (Booleanos): Son un tipo de dato que puede tener uno de dos valores: true o false. A menudo, utilizamos null para representar un valor 
que a√∫n no ha sido inicializado o para representar un valor que no tiene sentido en el contexto actual
*/
const nombre = null;
console.log(nombre); // imprime "null"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* 
Undefined: Representa un valor que no ha sido definido. Si declaramos una variable y no le asignamos un valor, su valor ser√° undefined.
*/
let nombre;
console.log(nombre); // imprime "undefined"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* 
Diferencias entre Null y Undefined: Null es un valor que representa la ausencia de valor, mientras que Undefined es un tipo de dato que 
representa la ausencia de valor.
*/

// Ejemplo gatito sin due√±o
let gatito = {
    nombre: "Michi",
    edad: 3,
    due√±o: null
  };
  
  console.log(gatito.due√±o); // "null", se usa null para indicar que no tiene due√±o pero el valor existe

// Por otro lado, podr√≠amos utilizar undefined para representar que un gato a√∫n no ha sido adoptado:

let gato;
console.log(gato); // "undefined", su estilo es undefined porque no ha sido definido ningun valor para la variable gato 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* 
Symbol: Los s√≠mbolos son un tipo de dato √∫nico en JavaScript que se utiliza para crear identificadores √∫nicos. Cada vez que se crea un s√≠mbolo, 
se genera un nuevo identificador √∫nico, lo que lo hace ideal para usar como claves de objetos o para identificar elementos de manera √∫nica en 
una aplicaci√≥n.
*/
const simbolo = Symbol();

let perrito = {
  nombre: "Firulais",
  edad: 3,
  [simbolo]: "Identificador √∫nico"
};

console.log(perrito[simbolo]); // "Identificador √∫nico"

// Tambi√©n puedes proporcionar una descripci√≥n opcional al crear un s√≠mbolo, lo que puede ser √∫til para depurar y mantener el c√≥digo:

const simbolo = Symbol("Identificador √∫nico de gatitos");
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* 
BigInt: BigInt es un tipo de dato num√©rico que se utiliza para representar n√∫meros enteros grandes. Se crean a√±adiendo la letra n al final de un 
n√∫mero entero.
*/

const numeroGrande = 12345678901234567890n;

console.log(numeroGrande + 1n); // 12345678901234567891n
console.log(numeroGrande * 2n); // 2469135780246913578n
console.log(numeroGrande / 3n); // 411218936707805260n

/* 
Es importante tener en cuenta que los bigint solo pueden ser usados para operaciones matem√°ticas y no pueden ser usados con operadores de 
comparaci√≥n, como == o ===. En su lugar, debes usar los m√©todos BigInt.asIntN y BigInt.asUintN para hacer comparaciones entre bigint y 
n√∫meros normales.

Tambi√©n es importante tener en cuenta que los bigInt no son compatibles con todas las funciones y m√©todos de JavaScript que aceptan 
n√∫meros, por lo que debes asegurarte de verificar la documentaci√≥n de la funci√≥n o m√©todo que quieres usar antes de intentar usar bigInt 
con ellos.
*/